/*
This main function parses input data from the terminal or from a
separate txt file. The data it reads in is an nxn hex maze (Though
it also has compatibility for mxn mazes as well). It defines a
pathfinder object from my pathfinder class, and passes it a maze
in the form of a 2D vector created by converting the input 0 - F
hex strings and converting them into their 0-15 integer counterparts.

This program works in conjunction with my maze generator program that
can be found in folder 21-6. To run this program, type the word 
make into the terminal press enter, then type ./p8 < input.txt where 
input.txt contains a maze generated by my maze generator program.

To see the generated path, copy and paste the maze, then the output
path from this program in the text boxes at the following website:
https://jeff.cis.cabrillo.edu/tools/cs21_maze_viewer

author: massimoginella12@gmail.com
*/

#include <iostream>
#include "pathfinder.h"


int main() {
    std::string line = "";
    int hex_digit = 0;
    std::vector<std::vector<int>> maze;
    pathfinder path;

    while (std::getline(std::cin, line)) {          // each line of input is a row of the maze
        std::vector<int> row;                       // create a vector that stores data for a given row

        for(size_t i = 0; i < line.length(); i++) {
            line[i] = std::tolower(line[i]);        // convert hex data that could be 'A-F' to lowercase 'a-f'

            if (line[i] >= 'a' && line[i] <= 'f') {
                hex_digit = (line[i] + 10) - 97;    // convert the hex char to integer counterpart
            } else if (line[i] >= '0' && line[i] <= '9') {
                hex_digit = line[i] - 48;           // convert the hex char to integer counterpart
            }

            row.push_back(hex_digit);               // add the hex digit to the row vector
        }

        maze.push_back(row);                        // add the row vector into the 2D maze vector
    }

    path.find_path(maze);                           // pass the maze to the find_path function to output the
                                                    // path that solves the maze

    return 0;
}